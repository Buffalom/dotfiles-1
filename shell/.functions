#!/usr/bin/env bash

function continue_prompt {
    local yn
    while true; do
        echo "Do you want to continue? (y/n) "
        read yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer y or n.";;
        esac
    done
}

function archive() {
    zip -r "$1".zip "$1" ;
}

function wholisten() {
    lsof -nP -i4TCP:$1 | grep LISTEN
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# All the dig info
function digga() {
    type=${2:-A}
    dig +nocmd "$1" "$type" +multiline +noall +answer
}

function copysshkey() {
    local port=${2:-22}
    ssh-copy-id -i ~/.ssh/id_rsa $1 -p $port
}

#  Commit everything
function commit() {
    commitMessage="$1"

    if [ "$commitMessage" = "" ]; then
        commitMessage="wip"
    fi

    git add .
    eval "git commit -a -m '${commitMessage}'"
}

# push to remote origin
function push() {
    target=${1:-origin}
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push $target $branch
}

# force push current branch to remote origin
function pushforce() {
    branch=$(git branch | awk '/\*/ { print $2; }')
    git push origin +$branch
}

function phpversion() {
    version=$(php --version | head -n 1 | cut -d " " -f 2 | cut -d "." -f 1,2)
    echo $version
}

function phprestart() {
    currentVersion=$(phpversion)
    brew services restart "php@${currentVersion}"
    herd restart
}

function xdebug() {
    currentVersion=$(phpversion)
    iniFileLocation="/usr/local/etc/php/${currentVersion}/conf.d/ext-xdebug.ini";
    echo "checking ini file at $iniFileLocation"
    if [ ! -f "$iniFileLocation" ]; then
        echo "creating missing config file"
        echo "zend_extension=\"xdebug.so\""  > /usr/local/etc/php/${currentVersion}/conf.d/ext-xdebug.ini
    fi

    currentLine=`cat $iniFileLocation | grep xdebug.so`

    if [[ "$currentLine" =~ \#zend_extension ]];
    then
        sed -i -e 's/^#zend_extension/zend_extension/g' $iniFileLocation
        echo "xdebug is now active";
    else
        sed -i -e 's/^zend_extension/#zend_extension/g' $iniFileLocation
        echo "xdebug is now inactive";
    fi
    phprestart
}

function scheduler() {
    while :; do
        php artisan schedule:run
        echo "Sleeping 60 seconds..."
        sleep 60
    done
}

function watchfolder() {
    folder=${1:-$(pwd)}

    echo "start watching $folder"
    fswatch -r $folder
}

# Network scanner
function bitCountForMask {
    local -i count=0
    local mask="${1##0x}"
    local digit

    while [ "$mask" != "" ]; do
        digit="${mask:0:1}"
        mask="${mask:1}"
        case "$digit" in
            [fF]) count=count+4 ;;
            [eE]) count=count+3 ;;
            [cC]) count=count+2 ;;
            8) count=count+1 ;;
            0) ;;
            *)
                echo 1>&2 "error: illegal digit $digit in netmask"
                return 1
            ;;
        esac
    done

    echo $count
}

function scanNetwork() {
    local defaultNet="192.168.1.0/24"
    local network="${1:-$defaultNet}"
    echo "scanning network $network"
    nmap -sn $network -oG - | awk '/Up$/{print $2 " " $3}'
}

function removeVendors() {
    local projectsFolder='~/Projects';
    local folder="${1:-$projectsFolder}";
    cd $folder && find . -name "node_modules" -exec rm -rf '{}' +
    cd $folder && find . -name "vendor" -exec rm -rf '{}' +
}

function opendb () {
   [ ! -f .env ] && { echo "No .env file found."; exit 1; }

   DB_CONNECTION=$(grep DB_CONNECTION .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
   DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

   DB_URL="${DB_CONNECTION}://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}"

   echo "Opening ${DB_URL}"
   open $DB_URL
}

function db {
    rootpasswd="";

    if [ "$1" = "refresh" ]; then
        MYSQL_PWD=${rootpasswd} mysql -uroot -e "drop database $2; create database \`$2\` CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
    elif [ "$1" = "create" ]; then
        MYSQL_PWD=${rootpasswd} mysql -uroot -e "create database \`$2\`"
    elif [ "$1" = "drop" ]; then
        MYSQL_PWD=${rootpasswd} mysql -uroot -e "drop database \`$2\`"
    fi
}

function createDb() {
    [ ! -f .env ] && { echo "No .env file found."; exit 1; }

    # DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    # DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    MYSQL_PWD=${DB_PASSWORD} mysql -u${DB_USERNAME} -e "CREATE DATABASE \`$DB_DATABASE\` CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;";
}

function dropDb() {
    [ ! -f .env ] && { echo "No .env file found."; exit 1; }

    # DB_HOST=$(grep DB_HOST .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    # DB_PORT=$(grep DB_PORT .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_DATABASE=$(grep DB_DATABASE .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_USERNAME=$(grep DB_USERNAME .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)
    DB_PASSWORD=$(grep DB_PASSWORD .env | grep -v -e '^\s*#' | cut -d '=' -f 2-)

    MYSQL_PWD=${DB_PASSWORD} mysql -u${DB_USERNAME} -e "DROP DATABASE IF EXISTS \`$DB_DATABASE\`;";
}

function execSql() {
    rootpasswd="";
    if [ -z "$2" ]; then
        query=$1
        MYSQL_PWD=${rootpasswd} mysql -uroot -e "$query";
    else
        DB=$1;
        query=$2;
        MYSQL_PWD=${rootpasswd} mysql -uroot -D "$DB" -e "$query";
    fi
}

function backupLocalDbs() {
    # edit global client config
    #
    # vim ~/.my.cnf
    #
    # ```
    # [client]
    # user = root
    # password = secret
    # ```
    for DB in $(mysql -e 'show databases' -s --skip-column-names); do
        echo "backing up $DB..."
        mysqldump $DB | gzip > "$DB.sql.gz";
    done
}


function phpini() {
    iniPath=$(php -i | grep /.+/php.ini -oE)
    code $iniPath
}

function watchlog() {
    tail -f -n 100 storage/logs/laravel.log
}

function gitmovie() {
    echo "generating avatars from Gravatar..."
    perl "$DOTFILESDIR/misc/gen-git-avatars"
    echo "starting gource..."
    gource --user-image-dir .git/avatar/ --seconds-per-day 0.1 --auto-skip-seconds 1 -1280x720 -o gource.ppm
    echo "convert into mp4..."
    ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i gource.ppm -vcodec libx264 -preset ultrafast -pix_fmt yuv420p -crf 1 -threads 0 -bf 0 gource.mp4
    echo "cleanup..."
    rm -f gource.ppm
}

colorize_via_pygmentize() {
    if ! (( $+commands[pygmentize] )); then
        echo "package 'Pygments' is not installed!"
        return 1
    fi

    # If the environment varianle ZSH_COLORIZE_STYLE
    # is set, use that theme instead. Otherwise,
    # use the default.
    if [ -z $ZSH_COLORIZE_STYLE ]; then
        ZSH_COLORIZE_STYLE="default"
    fi

    # pygmentize stdin if no arguments passed
    if [ $# -eq 0 ]; then
        pygmentize -O style="$ZSH_COLORIZE_STYLE" -g
        return $?
    fi

    # guess lexer from file extension, or
    # guess it from file contents if unsuccessful

    local FNAME lexer
    for FNAME in "$@"
    do
        lexer=$(pygmentize -N "$FNAME")
        if [[ $lexer != text ]]; then
            pygmentize -O style="$ZSH_COLORIZE_STYLE" -l "$lexer" "$FNAME"
        else
            pygmentize -O style="$ZSH_COLORIZE_STYLE" -g "$FNAME"
        fi
    done
}

function hosts() {
    sudo code /etc/hosts
}

function speedtest() {
    local defaultServer="bouygues.iperf.fr"
    local server="${1:-$defaultServer}"
    echo "running iperf3 test to server $server"
    iperf3 -c "$server" -f m -i10
}

function speedtest-server() {
    iperf3 -s -f m
}

function updateAppStore() {
    # Update App Store apps
    sudo softwareupdate -i -a
}

# Guess email for git user
function email-guess() {
    GREEN="\033[32m"
    NOCOLOR="\033[0m"

    remote=`git remote -v | awk '/\(push\)$/ {print $2}'`
    email=mail@tomdgm.ch # default
    signingkey=E5F520B22967C1E1 # default

    if [[ $remote == *gitlab.com:JKwebGmbH* ]]; then
        email=tom.diggelmann@novu.ch
        signingkey=27D2441DEA447A80
    fi
    if [[ $remote == *github.com:teamnovu* ]]; then
        email=tom.diggelmann@novu.ch
        signingkey=27D2441DEA447A80
    fi
    if [[ $remote == *github.com:nmbrz* ]]; then
        email=tom.diggelmann@novu.ch
        signingkey=27D2441DEA447A80
    fi
    if [[ $remote == *projects.lernetz.ch* ]]; then
        email=tom.diggelmann@novu.ch
        signingkey=27D2441DEA447A80
    fi

    echo -e "${GREEN}Configuring user.email as $email${NOCOLOR}"
    git config user.email $email
    echo -e "${GREEN}Configuring user.signingkey as $signingkey${NOCOLOR}"
    git config user.signingkey $signingkey
}

function shush() {
    "$@" >& /dev/null
}

function mitm() {
    sudo ettercap -T -S -i $1 -M arp:remote /$2// /$3//
}

function silent() {
   "$@" >& /dev/null
}

function checkAwsProfile() {
    # check if the given parameter (a certain profile) is set in the file ~/.aws/credentials if not echo an example and exit with 1
    local profile=$1
    local file=~/.aws/credentials
    local example=$(\cat << EOF
[$profile]
aws_access_key_id = <your access key>
aws_secret_access_key = <your secret key>
EOF
)

    if ! grep -q "\[$profile\]" $file; then
        # echo the following lines in red and reset afterwards
        tput setaf 1
        echo "AWS Profile $profile not found in $file"
        echo "Make sure you have a profile with the name $profile and the correct permissions in $file"
        echo ""
        echo "Example:"
        echo "$example"
        tput sgr0
        return 1
    fi

    return 0
}

function createS3UserWithPolicy() {
    local username=$1
    local bucket=$2
    local profile=$3
    local argsIam=(--profile $3 --endpoint-url=https://iam.wasabisys.com)

    checkAwsProfile $profile || return 1


    # use backspace to ensure alias of cat is not used!
    local policy=$(\cat << EOF
{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Sid": "AllowAllS3Actions",
          "Effect": "Allow",
          "Action": [
              "s3:*"
          ],
          "Resource": [
              "arn:aws:s3:::$bucket",
              "arn:aws:s3:::$bucket/*"
          ]
      }
  ]
}
EOF
)

    echo "Creating User $username"
    aws iam create-user $argsIam \
        --user-name $username

    echo "Creating policy to allow access to bucket $username"
    local policyArn=$(aws iam create-policy $argsIam \
        --policy-name $username \
        --policy-document ${policy} \
        --output json | jq -r .Policy.Arn)

    echo "Attaching policy $policyArn to user $username"
    aws iam attach-user-policy $argsIam \
        --user-name $username \
        --policy-arn $policyArn

    echo "Creating access key and secret for user $username and echo"
    local accessKeyResult=$(aws iam create-access-key $argsIam \
        --user-name $username \
        --output json)
    echo
    echo -n "Access Key ID: "
    echo $accessKeyResult | jq -r .AccessKey.AccessKeyId
    echo -n "Access Secret: "
    echo $accessKeyResult | jq -r .AccessKey.SecretAccessKey
}

function setupS3Bucket() {
    local name=$1
    local profile=$2
    local defaultRegion="eu-central-2"
    local region="${3:-$defaultRegion}"
    local args=(--profile $profile --endpoint-url="https://s3.${region}.wasabisys.com")

    checkAwsProfile $profile || return 1

    echo
    echo "Creating the following resources in region $region using profile $profile:"
    echo "- bucket $name"
    echo "- user $name"
    echo "- policy $name"
    echo

    if  ! continue_prompt; then
        return
    fi


    echo "Creating bucket $name in region $region"
    aws s3api create-bucket $args \
        --bucket $name

    createS3UserWithPolicy $name $name $profile

    echo
    echo "Endpoint for bucket $name is https://s3.${region}.wasabisys.com"
    echo "Open in Wasabi Console: https://console.wasabisys.com/#/file_manager/${name}?region=${region}"
    echo
    echo "Bucket $name created"
}

function deleteS3User() {
    local name=$1
    local profile=$2
    local argsIam=(--profile $profile --endpoint-url=https://iam.wasabisys.com)

    checkAwsProfile $profile || return 1

    echo "Detaching all policies from user $name"
    aws iam list-attached-user-policies $argsIam \
        --user-name $name \
        --output json | jq -r '.AttachedPolicies[].PolicyArn' | while read policyArn; do
        aws iam detach-user-policy $argsIam \
            --user-name $name \
            --policy-arn $policyArn
    done

    echo "Deleting all access keys for user $name"
    aws iam list-access-keys $argsIam \
        --user-name $name \
        --output json | jq -r '.AccessKeyMetadata[].AccessKeyId' | while read accessKeyId; do
        aws iam delete-access-key $argsIam \
            --user-name $name \
            --access-key-id $accessKeyId
    done

    local policyArn=$(aws iam list-policies $argsIam \
        --output json | jq -r ".Policies[] | select(.PolicyName == \"$name\") | .Arn")
    echo "Deleting policy $policyArn"
    aws iam delete-policy $argsIam \
        --policy-arn $policyArn

    echo "Deleting user $name"
    aws iam delete-user $argsIam \
        --user-name $name
}

function destroyS3Resources() {
    local name=$1
    local profile=$2
    local defaultRegion="eu-central-2"
    local region="${3:-$defaultRegion}"
    local args=(--profile $profile --endpoint-url="https://s3.${region}.wasabisys.com")

    checkAwsProfile $profile || return 1

    echo
    echo "Deleting the following resources in region $region with profile $profile:"
    echo "- bucket $name"
    echo "- user $name"
    echo "- policy $name"
    echo

    if  ! continue_prompt; then
        return
    fi
    if  ! continue_prompt; then
        return
    fi

    deleteS3User $name $profile

    echo "Deleting bucket $name"
    aws s3api delete-bucket $args \
        --bucket $name

    echo "Bucket $name destroyed"
}
